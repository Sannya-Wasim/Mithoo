const User = require("../models/User.js");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");

const authController = require("express").Router();

const createToken = (user) => {
  const payload = {
    id: user._id.toString(),
    email: user.email,
  };
  const token = jwt.sign(payload, process.env.JWT_SECRET);
  return token;
};

authController.post("/signup", async (req, res) => {
  try {
    const isExisting = await User.findOne({ email: req.body.email });
    if (isExisting) {
      return res.status(500).json({ msg: "User has already been registered!" });
    }
    if (
      req.body.username === " " ||
      req.body.email === " " ||
      req.body.password === " "
    ) {
      return res.status(500).json({ msg: "All fields must be filled" });
    }

    const hashedPassword = await bcrypt.hash(req.body.password, 10);

    const user = await User.create({ ...req.body, password: hashedPassword });
    await user.save();

    const { password, ...others } = user._doc;
    const token = createToken(user);

    return res.status(200).json({ others, token });
  } catch (error) {
    return res.status(500).json(error.message);
  }
});

authController.post("/login", async (req, res) => {
  try {
    const { email, password: userPassword } = req.body;
    if (email === "" || userPassword === " ") {
      return res.status(500).json({ msg: "All fields must be filled" });
    }
    const user = await User.findOne({email})
    if (!user){
        return res.status(500).json({ msg: "Invalid credentials" });
    }

    const comparePassword = await bcrypt.compare(userPassword, user.password)
    if(!comparePassword) {
        return res.status(500).json({ msg: "Invalid credentials" });
    }

    const {password, ...others} = user._doc
    const token = createToken(user)

    return res.status(200).json({ others, token });

  } catch (error) {
    return res.status(500).json(error.message);
  }
});

module.exports = authController;
